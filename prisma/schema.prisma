datasource db {
  provider = "postgresql"  // or whatever your database provider is (e.g., "mysql", "sqlite")
  url      = env("DATABASE_URL")  // The connection string stored in the .env file
}

// Add the generator block to generate Prisma client
generator client {
  provider = "prisma-client-js"
}


model Celebrity {
  id            Int    @id @default(autoincrement())
  name          String
  dp            String
  socialmediaId String 
  posts         Post[] // Relation to the 'Post' model

  @@index([name])
}

model Product {
  id          Int           @id @default(autoincrement())
  brandname   String
  seoname     String
  category    String
  whishList   Boolean
  shop        String
  link        String        
  imageUrl    String        @unique
  PostProduct PostProduct[]
  @@index([shop, category])
  User User[]
}

model Post {
  id          Int           @id @default(autoincrement())
  celebrityId Int
  imageUrl    String[]         
  date        DateTime       @default(now())
  Liked       Boolean
  products    PostProduct[]  // Relation to the 'PostProduct' model
  Celebrity   Celebrity      @relation(fields: [celebrityId], references: [id])

  @@index([celebrityId])
  User User[]
}

model PostProduct {
  id        Int     @id @default(autoincrement())
  postId    Int
  productId Int
  Post      Post    @relation(fields: [postId], references: [id])
  Product   Product @relation(fields: [productId], references: [id])
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  likedPost     Post[]
  wishList      Product[]
  accounts      Account[]
  sessions      Session[]
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
